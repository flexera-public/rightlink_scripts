#! /bin/bash -e
#
# ---
# RightScript Name: RL10 Linux Setup Chrony
# Description: Installs and configures Chrony client (replaced NTP in RedHat/CentOS 8).
# Inputs:
#   SETUP_CHRONY:
#     Category: RightScale
#     Description: |
#       Whether or not to configure Chrony. "if_missing" only configures Chrony if its not already setup by a service such as
#       DHCP while "always" will overwrite any existing configuration.
#     Input Type: single
#     Required: true
#     Advanced: true
#     Default: text:if_missing
#     Possible Values:
#       - text:always
#       - text:if_missing
#       - text:none
#   NTP_SERVERS:
#     Category: RightScale
#     Description: |
#       A comma-separated list of fully qualified domain names for the array  of servers that instances should talk to
#       Example: time1.example.com, time2.example.com, time3.example.com. An empty value will leave ntp unconfigured.
#     Input Type: single
#     Required: true
#     Advanced: true
#     Default: text:time.rightscale.com
# Attachments: []
# ...

# Check if a file needs to be written. First checks if the target file exists and if so checks if the checksums of the
# target file and the temporary file match.
#
# $1: the target file path to be checked
# $2: the temporary file path with new contents to check against
function run_check_write_needed() {
  sudo [ ! -f "$1" ] || [[ $(run_checksum "$2") != $(run_checksum "$1") ]]
}

# Get the SHA256 checksum of a file.
#
# $1: the file path to get the checksum from
#
function run_checksum() {
  sudo sha256sum "$1" | cut -d ' ' -f 1
}

# Add a temporary file to the list of temporary files to clean up on exit.
#
# $@: one or more file paths to add to the list
#
function add_mktemp_file() {
  mktemp_files=("$@" "${mktemp_files[@]}")
}

# Handle installation of Chrony service first off

# Run passed-in command with retries if errors occur.
#
# $@: full line command
#
function retry_command() {
  # Setting config variables for this function
  retries=5
  wait_time=10

  while [ $retries -gt 0 ]; do
    # Reset this variable before every iteration to be checked if changed
    issue_running_command=false
    $@ || { issue_running_command=true; }
    if [ "$issue_running_command" = true ]; then
      (( retries-- ))
      echo "Error occurred - will retry shortly"
      sleep $wait_time
    else
      # Break out of loop since command was successful.
      break
    fi
  done

  # Check if issue running command still existed after all retries
  if [ "$issue_running_command" = true ]; then
    echo "ERROR: Unable to run: '$@'"
    return 1
  fi
}


SETUP_CHRONY=${SETUP_CHRONY:-"if_missing"}
if [[ "$SETUP_CHRONY" == "none" ]]; then
  echo "Not configuring Chrony: SETUP_CHRONY is none"
  exit 0
fi

if [[ -z "$SETUP_CHRONY" ]]; then
  echo "Not configuring Chrony: No Chrony servers specified"
  exit 0
fi

#######################################
# Setup Chrony
#######################################
if [[ -d /etc/yum.repos.d ]] && grep -q 'release 8' /etc/redhat-release; then
  chrony_service=chronyd
  if ! which chronyd >/dev/null 2>&1; then
    retry_command sudo yum install -y chronyd
  fi
  if sudo chkconfig 2>/dev/null | grep chronyd >/dev/null 2>&1; then
    sudo chkconfig chronyd on
  elif sudo systemctl list-unit-files 2>/dev/null | grep chronyd >/dev/null 2>&1; then
    sudo systemctl enable chronyd
  fi
else
  echo "Not installing or configuring Chrony, unsupported or unknown distro."
  exit 0
fi

if [[ "$SETUP_CHRONY" == "if_missing" ]]; then
  if grep -i -E '^server ' /etc/chrony.conf 2>/dev/null; then
    echo "Chrony already configured, skipping setup."
    if ! sudo service $chrony_service status; then
      sudo service $chrony_service start
    fi
    exit 0
  fi
fi

#######################################
# Configure Chrony
#######################################

# Declare a list for temporary files to clean up on exit and set the command to delete them if they still exist when the
# script exits
declare -a mktemp_files
trap 'sudo rm --force "${mktemp_files[@]}"' EXIT

# Read NTP servers input into an array
IFS=',' read -r -a ntp_servers_array <<<"$NTP_SERVERS"

# Initialize variables
chrony_conf=/etc/chrony.conf
chrony_driftfile=/var/lib/chrony/drift
chrony_keyfile=/etc/chrony.keys
chrony_logdir=/var/log/chrony
chrony_service_notify=0

# Create a temporary file for the Chrony configuration
chrony_conf_tmp=$(sudo mktemp "${chrony_conf}.XXXXXXXXXX")
add_mktemp_file "$chrony_conf_tmp"

sudo tee "$chrony_conf_tmp" >/dev/null <<EOF
# Generated by BASE Chrony RightScript
driftfile $chrony_driftfile
makestep 1.0 3
rtcsync
keyfile $chrony_keyfile
leapsectz right/UTC
logdir $chrony_logdir

EOF

for ntp_server in "${ntp_servers_array[@]}"; do
  sudo tee -a "$chrony_conf_tmp" >/dev/null  <<EOF
server $ntp_server iburst
EOF
done

# Overwrite and backup the Chrony configuration if it has changed
if run_check_write_needed "$chrony_conf" "$chrony_conf_tmp"; then
  sudo chown chrony:chrony "$chrony_conf_tmp"
  sudo chmod 0644 "$chrony_conf_tmp"

  [[ -f $chrony_conf ]] && sudo cp --archive $chrony_conf "${chrony_conf}.$(date -u +%Y%m%d%H%M%S)"
  sudo mv --force "$chrony_conf_tmp" "$chrony_conf"
  if which restorecon >/dev/null 2>&1; then
    sudo restorecon -v "$chrony_conf" || true
  fi
  chrony_service_notify=1
fi

# Start the NTP service if it is not running or restart it if it needs to be restarted
if ! sudo service $chrony_service status; then
  sudo service $chrony_service start
elif [[ $chrony_service_notify -eq 1 ]]; then
  sudo service $chrony_service restart
fi
